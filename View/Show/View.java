/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Show;


import Controller.Show.*;
import Model.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.TableModel;

/**
 *
 * @author doriane kaffo 
 */
public class View extends javax.swing.JPanel {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAnimation;
    private javax.swing.JComboBox choiceAnimation;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton imprimer;
    // End of variables declaration//GEN-END:variables
    private int io = 0;
    private String TypeLast = "";
    private DBInteraction query = null;
    private EventTypeController eventTypeCtrl = null;
    private EventController eventCtrl = null;
    private AnimalEventController animalEventCtrl = null;
    private PersonneEventController personneEventCtrl = null;
    /**
     * Creates new form view
     */
    public View() {
        initComponents();
        eventTypeCtrl = new EventTypeController();
        eventCtrl = new EventController();
        animalEventCtrl = new AnimalEventController();
       personneEventCtrl = new PersonneEventController();
        try {
            query = new DBInteraction();
        } catch (ExceptionDataBase exceptionDataBase) {
            exceptionDataBase.printStackTrace();
        }
        initValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        choiceAnimation = new javax.swing.JComboBox();
        addAnimation = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        imprimer = new javax.swing.JButton();
        imprimer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                (new ImpressionController()).imprimer();
            }
        });
        jLabel1.setText("Choix de l'animation :");

        choiceAnimation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        choiceAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceAnimationActionPerformed(evt);
            }
        });

        addAnimation.setText("Ajouter une Animation");
        addAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnimationActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                },
                new String [] {
                        "Planning", "Personnel", "Animaux"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Ajouter une date a l'animation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        imprimer.setText("Imprimer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(choiceAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(imprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(addAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33))
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(220, 220, 220)
                                                .addComponent(jButton1)))
                                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(choiceAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(addAnimation)
                                        .addComponent(imprimer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>

    /*
        Add a new event
     */
    private void addAnimationActionPerformed(java.awt.event.ActionEvent evt) {
        final JDialog dg = new JDialog();
        dg.setTitle("Ajouter une animation");
        dg.setSize(new Dimension(410,150));
        final DialogNewAnimation pan = new DialogNewAnimation();
        dg.setLocation(300+this.getWidth()/2 - dg.getWidth()/2, 20+this.getHeight()/2 - dg.getHeight()/2);
        dg.add(pan);
        dg.setResizable(false);
        dg.setVisible(true);
        ActionListener n = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                String txt = pan.getjTextField1().getText();
                int c = choiceAnimation.getModel().getSize();
                String lst = "";
                //choiceAnimation.addItem(txt);
                System.out.println("Ajout du type evenement "+txt);
                if(eventTypeCtrl.save(txt)) {
                    TypeLast = txt;
                    new JOptionPane().showMessageDialog(null, "Enregistrement de "+txt+" a reussie", "Warning",
                            JOptionPane.INFORMATION_MESSAGE);
                    initValue();
                    dg.setVisible(false);
                }else{
                    new JOptionPane().showMessageDialog(null, "Enregistrement de "+txt+" a echoue", "Warning",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
        
        };
        ActionListener n2 = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                dg.setVisible(false);
            }

        };
        pan.getjToggleButton1().addActionListener(n);
        pan.getjToggleButton2().addActionListener(n2);
    }
    /*
    ADD EVENT
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        final JDialog dg = new JDialog();
        dg.setTitle("Planifier une animation");
        dg.setSize(new Dimension(900,650));
        final DialogNewAnimationPlaning pan = new DialogNewAnimationPlaning();
        pan.initValues(null);
        dg.setLocation(0, 150);
        GridBagConstraints gbcConstraint = new GridBagConstraints();
        gbcConstraint.gridx = 0;
        gbcConstraint.gridy = 0;
        gbcConstraint.insets = new Insets(5,5,5,5);
        gbcConstraint.anchor = GridBagConstraints.WEST;
        dg.setLayout(new GridBagLayout());
        dg.getContentPane().add(new DateModel("Date Animation"),gbcConstraint);
        gbcConstraint.gridy = 1;
        dg.getContentPane().add(pan,gbcConstraint);
        dg.setVisible(true);
        ActionListener n = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                dg.setVisible(false);
            }
        };
        ActionListener n2 = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                dg.setVisible(false);
            }
        };
        pan.getAddButton().addActionListener(n);
        pan.getCancelButton().addActionListener(n2);
    }

    private void choiceAnimationActionPerformed(java.awt.event.ActionEvent evt) {
        String c = choiceAnimation.getSelectedItem().toString();
        if(c.equalsIgnoreCase("Tout"))
            this.TypeLast = "";
        else
            this.TypeLast = c;
        this.initValue();
    }

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {
        
        System.out.println("change property "+evt.getPropertyName());
    }


    private void initValue() {
        jTable1 = new javax.swing.JTable();
        jTable1.removeFocusListener(null);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null}
                },
                new String [] {
                        "Planning", "Personnel", "Animaux"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        ArrayList<String> listType = null;
        listType = eventTypeCtrl.selAll();
        String[] listeAnim = new String[listType.size()+1];
        
        listeAnim[0] = "Tout";
        for(int i=1;i<listType.size()+1;i++){
            listeAnim[i] = listType.get(i-1);
        }
        choiceAnimation.setModel(new javax.swing.DefaultComboBoxModel(listeAnim));
        if(this.TypeLast.length()>0)
            choiceAnimation.setSelectedItem(this.TypeLast);

        ArrayList<Evenement> list = null;
        if(this.TypeLast.length()>0) {
            list = eventCtrl.selAllByEventType(this.TypeLast);
        }else {
                    list = new ArrayList<Evenement>();
                    for (String evT : listeAnim){
                        ArrayList<Evenement> c = eventCtrl.selAllByEventType(evT);
                        for(Evenement evt : c){
                            list.add(evt);
                        }
                    }
        }
        final Object[][] content1 = new Object[list.size()][];
        System.out.print(list.size()+"   --   ");
        for(int i=0;i<list.size();i++){
            System.out.println(list.get(i));
            ArrayList<Animal> lstAn = animalEventCtrl.selAllByEventId(list.get(i).getId());

            String anim = "";
            if(lstAn.size()==0)
                anim = "none";
            for (Animal a:lstAn){
                anim+=a.getNom()+",";
            }
            String pers = "";
            ArrayList<Personne> lstPr =  personneEventCtrl.selAllByEventId(list.get(i).getId());
            if(lstPr.size()==0)
                anim = "none";
            for (Personne a:lstPr){
                pers+=a.getNom()+",";
            }
            content1[i]=(new Object[]{list.get(i).getDate(),pers,anim});
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                content1
            ,
            new String [] {
                "Planning", "Personnel", "Animaux"
            }
        ));

        ArrayList<Evenement> finalList = list;
        MouseAdapter MS1 = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int col = jTable1.columnAtPoint(e.getPoint());
                final int row = jTable1.rowAtPoint(e.getPoint());
                String name = jTable1.getColumnName(col);
                System.out.println("Column index selected " + row + " " + col + " " + name);
                final JDialog dg = new JDialog();
                dg.setTitle("Modifier une plannification");
                dg.setSize(new Dimension(900,650));
                final DialogNewAnimationPlaning pan = new DialogNewAnimationPlaning();
                pan.initValues(finalList.get(row));
                dg.setLocation(0, 150);
                GridBagConstraints gbcConstraint = new GridBagConstraints();
                gbcConstraint.gridx = 0;
                gbcConstraint.gridy = 0;
                gbcConstraint.insets = new Insets(5,5,5,5);
                gbcConstraint.anchor = GridBagConstraints.WEST;
                dg.setLayout(new GridBagLayout());
                dg.getContentPane().add(new DateModel("Date Animation"),gbcConstraint);
                gbcConstraint.gridy = 1;
                dg.getContentPane().add(pan,gbcConstraint);
                dg.setVisible(true);
                ActionListener n = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        dg.setVisible(false);
                    }
                };
                ActionListener n2 = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        dg.setVisible(false);
                    }
                };
                pan.getAddButton().addActionListener(n);
                pan.getCancelButton().addActionListener(n2);
            }
        };
        jTable1.addMouseListener(MS1);
        MouseAdapter MS = new MouseAdapter(){
            @Override
            public void mousePressed(MouseEvent e) {
                int col = jTable1.columnAtPoint(e.getPoint());
                final int row = jTable1.rowAtPoint(e.getPoint());
                String name = jTable1.getColumnName(col);
                System.out.println("Column index selected " + row + " " + col + " " + name);
                final JDialog dg = new JDialog();
                dg.setTitle("Modifier une plannification");
                dg.setSize(new Dimension(565,350));
                final DialogUpdateAnimation pan = new DialogUpdateAnimation();
                dg.setLocation(330+530/2 - dg.getWidth()/2, 20+550/2 - dg.getHeight()/2);
                dg.add(pan);
//                pan.setLocation(330+520/2 - pan.getWidth()/2, 20+550/2 - pan.getHeight()/2);


                List<Animal> listA2 = animalEventCtrl.selAllByEventId(finalList.get(row).getId());
                String[] animaux2 = new String[listA2.size()];
                for(int i =0;i<listA2.size();i++)
                    animaux2[i] = listA2.get(i).getNom()+
                            " / "+
                            listA2.get(i).getRace();
                pan.getAnimaux().setModel(new javax.swing.DefaultComboBoxModel(animaux2));

                ArrayList<Animal> listA = animalEventCtrl.selAll();
                String[] animaux = new String[listA.size()];
                for(int i =0;i<listA.size();i++ ){
                    Animal a1 = listA.get(i);
                    boolean ajouter = true;
                    for (Animal a2 : listA2){
                        if(a1.getId()==a2.getId()) {
                            ajouter = false;
                            break;
                        }
                    }
                    animaux[i] = a1.getNom() +
                            " / " +
                            a1.getRace();
                }
                pan.getAnimauxAll().setModel(new javax.swing.DefaultComboBoxModel(animaux));


                List<Personne> listP2 = personneEventCtrl.selAllByEventId(finalList.get(row).getId());
                String[] personnes2 = new String[listP2.size()];
                for(int i =0;i<listP2.size();i++)
                    personnes2[i] = listP2.get(i).getNom()+" "+listP2.get(i).getNom();
                pan.getPersons().setModel(new javax.swing.DefaultComboBoxModel(personnes2));


                ArrayList<Personne> listP = personneEventCtrl.selAll();
                String[] personnes = new String[listP.size()];
                for(int i =0;i<listP.size();i++) {
                    Personne a1 = listP.get(i);
                    boolean ajouter = true;
                    for (Personne a2 : listP2){
                        if(a1.getIdPersonne()==a2.getIdPersonne()) {
                            ajouter = false;
                            break;
                        }
                    }
                    personnes[i] = listP.get(i).getNom() + " " + listP.get(i).getNom();
                }
                pan.getPersonAll().setModel(new javax.swing.DefaultComboBoxModel(personnes));




                dg.setResizable(false);
                dg.setVisible(true);
                pan.getNameAnimation().setText(finalList.get(row).getType());
                pan.getDateAnimation().setText(finalList.get(row).getDate().toString());
                ActionListener n = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        initValue();
                        pan.setVisible(false);
                    }
                };
                ActionListener deletePlaning = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        if( eventCtrl.delById(finalList.get(row).getId())){
                            dg.setVisible(false);
                            initValue();
                        }
                    }
                };
                ArrayList<Animal> finalListA1 = listA;
                ActionListener addAnimal = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        int animalSelected = pan.getAnimauxAll().getSelectedIndex();
                        Animal an = finalListA1.get(animalSelected);
                        if (animalEventCtrl.add(an.getId(), finalList.get(row).getId())) {
                            pan.getAnimaux().addItem(an.getNom() + "-" + an.getRace());
                            initValue();
                        } else {
                            new JOptionPane().showMessageDialog(null, "L ajout est impossible : en attente de l implementation au Model", "Warning",
                                    JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                };

                ArrayList<Animal> finalListA = listA;
                ActionListener delAnimal = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        int animalSelected = pan.getAnimaux().getSelectedIndex();
                        String val = pan.getAnimaux().getSelectedItem().toString();
                        Animal an = animalEventCtrl.selByNom(val);

                        if (animalEventCtrl.del(an.getId(), finalList.get(row).getId())) {

                            new JOptionPane().showMessageDialog(null, "La suppresion s est bien effectuee", "Succes",
                                    JOptionPane.INFORMATION_MESSAGE);
                            listA2.remove(an);
                            listA.add(an);

                            pan.getAnimauxAll().addItem(val);
                            pan.getAnimaux().remove(animalSelected);
                            initValue();
                        } else {
                            new JOptionPane().showMessageDialog(null, "La suppresion n a pas ete possible", "Warning",
                                    JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                };


                ArrayList<Personne> finalListP = listP;
                ActionListener addPerson = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        int personSelected = pan.getPersonAll().getSelectedIndex();
                        Personne an = finalListP.get(personSelected);
                        try {
                            if(query.insAnimalEvent(an.getIdPersonne(), finalList.get(row).getId()) != 0){
                                pan.getPersons().addItem(an.getNom()+"-"+an.getNom());
                                initValue();
                            }
                        } catch (SQLException e1) {
                            e1.printStackTrace();
                        }
                    }
                };

                ArrayList<Personne> finalListP1 = listP;
                ActionListener delPerson = new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        int personSelected = pan.getPersonAll().getSelectedIndex();
                        Personne an = finalListP1.get(personSelected);
//                        try {
//                            if(query.delPersonEvent(an.getIdPersonne(), finalList.get(row).getId())){
//                             pan.getPersons().removeItem(an.getNom()+"-"+an.getNom());
//                             initValue();
//                            }
//                        } catch (ExceptionDataBase exceptionDataBase) {
//                            exceptionDataBase.printStackTrace();
//                        } catch (SQLException e1) {
//                            e1.printStackTrace();
//                        }
                    }
                };

                pan.getRemoveAnimal().addActionListener(delAnimal);
                pan.getAddAnimal().addActionListener(addAnimal);
                pan.getUpdate().addActionListener(n);
                pan.getDelete().addActionListener(deletePlaning);
            }
        };
    }
}
